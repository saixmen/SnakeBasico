package snake;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.Timer;

/*
 * @author Martu
 */
public class Marco extends javax.swing.JFrame implements KeyListener, ActionListener {
    /*Implementar la clase que lee los métodos de escucha o captación de teclado */

    MiCanvas canvas;
    Snake snake;
    Comida manzana;
    /* Creamos un timer para que haya un movimiento continuo */
    Timer tSerpiente = new Timer (150,this);
    Timer tComida = new Timer (1000, this);
    
    
    public Marco() {
        initComponents();
        /* Capturamos la base de dibujo con formulario: el layout de la ventana */
        /* Añadimos nuestro lienzo, el canvas */
        System.out.println("Hola martaaaaaaaaaaaaaaa!!!!!!!!!!!!!!!!!!!!!!!")
        snake = new Snake();
        manzana = new Comida();
        canvas = new MiCanvas(snake, manzana);
        this.getContentPane().add(canvas);
        this.addKeyListener(canvas);
        tSerpiente.start();
        tComida.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        puntuacion = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(508, Short.MAX_VALUE)
                .addComponent(puntuacion)
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(puntuacion)
                .addContainerGap(378, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(547, 438));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Marco.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Marco.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Marco.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Marco.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Marco().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel puntuacion;
    // End of variables declaration//GEN-END:variables

    @Override
    public void keyTyped(KeyEvent e) {

    }

    @Override
    public void keyPressed(KeyEvent e) {
        /*Llamadas y reconocimiento de teclas */
        int key = e.getKeyCode();
        if(key==KeyEvent.VK_LEFT){
            snake.setMov('L');
        }
        if(key==KeyEvent.VK_RIGHT){
            snake.setMov('R');
        }
        if(key==KeyEvent.VK_UP){
            snake.setMov('U');
        }
        if(key==KeyEvent.VK_DOWN){
            snake.setMov('D');
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {

    }

    @Override
    public void actionPerformed(ActionEvent e) {
        Timer comida = (Timer)e.getSource();
        /*   */
        if(comida.getDelay()==this.tComida.getDelay()){

        }
        if(snake.getMov()== 'L'){
            snake.left();
        canvas.repaint();
        }
        if(snake.getMov()== 'R'){
                snake.right();
        canvas.repaint();
        }
        if(snake.getMov()== 'U'){
                snake.up();
        canvas.repaint();
        }
        if(snake.getMov()== 'D'){
                snake.down();
        canvas.repaint();
        }

    }
}
